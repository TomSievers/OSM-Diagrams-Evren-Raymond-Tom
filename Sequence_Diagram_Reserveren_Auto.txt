@startuml

actor Client
participant "clientApplication:ClientApplication" as ClientApp
participant "IClientSession:IClientSession" as ClientSession
participant "userSession:UserSession" as UserSession
participant "IDataBaseConnector:IDataBaseConnector" as IDataBaseConnector
participant "newReservation: Reservation" as Reservation

Client -> ClientApp: makeReservation(startDate: unsigned long long, endDate: unsigned long long) : void
activate ClientApp
ClientApp -> ClientSession: hasOpenPayment = hasOpenPayment() : boolean
activate ClientSession
ClientSession -> IDataBaseConnector: hasOpenPayment = userHasOpenPayment(userId: unsigned long long): boolean
activate IDataBaseConnector
deactivate IDataBaseConnector
deactivate ClientSession
alt hasOpenPayment == false
	ClientApp -> UserSession: userId = getId()
	activate UserSession
	deactivate UserSession
	create Reservation
	ClientApp -> Reservation: <<create>>
		ClientApp -> IDataBaseConnector: addReservationForUser(newReservation: Reservation, userId: unsigned long long) : void
		activate IDataBaseConnector
		deactivate IDataBaseConnector
		ClientApp -> Client: displayMessage(message: string) : void
else
	ClientApp -> Client: displayMessage(message: string) : void
	deactivate ClientApp
end
@enduml
