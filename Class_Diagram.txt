@startuml

Interface IClientSession
{
	+getUser(userId: unsigned long long): User
	+updateUser(updatedUser: User): boolean
	+searchCar(searchQuery: string, dataBase: IDataBaseCon): CarDetails[0..*]
}
Interface ICheckInDB
{
	+hasReservation(cardId: unsigned long long): boolean
	+checkIn(cardId: unsigned long) : void
	+checkOut(cardId: unsigned long) : void
	+hasCarInUse(cardId:unsigned long long) : boolean
	+returnCar(cardId: unsigned long long): boolean
	+poleBlinkSetup(blinkSignalOn: void(void), blinkSignalOff: void(void)): void
}
Interface ICloseCommunication
{
	+readSignature(): string
	+cardPresent(): boolean
}
Interface IPositional
{
	+getPosition(): Position
}

Interface ICarDB
{
	+getReservedCardId(id: unsigned long long): unsigned long long
	+updatePosition(currentPosition: Position): void
	+updateCarStatus(status: CarStatus):void
	+carBlinkSetup(blinkSignalOn: void(void), blinkSignalOff: void(void)): void
}

Interface ICar{
	+openDoors(): void
	+closeDoors(): void
	+areDoorsOpen(): boolean
	+enableImmobilizer(): void
	+disableImmobilizer(): void
	+isKeyPresent(): boolean
	+lightsOn(): void
	+lightsOff(): void
}
Interface IAdminSession
{
	+updateCar(updatedCar: CarDetails): boolean
}
Interface IPayment
{
	+sendInvoice(reservation: Reservation): void
	+reservationToInvoice(reservation: Reservation): OpenPayment
}
Interface IBank
{
	+recieveInvoice(id: unsigned long long, bankAccountNumber: string, amount: float): void
	+checkInvoiceStatus(id: unsigned long long): InvoiceStatus
}
Class GPS
{
	-longitude: double
	-latitude: double
	-altitude: double
}
Class RFID
Class Pole{
	-id: unsigned long long
	-blinkTimer: unsigned long long
	+mainThread(): short
	+blinkSignalOn(): void
	+blinkSignalOff(): void
}
Class Session
Class Payment
{
	-handlingPayments: OpenPayment[0..*]
	+mainThread(): short
}
Class CarModule
{
	-blinkTimer: unsigned long long
	+mainThread(): short
	+blinkSignalOn(): void
	+blinkSignalOff(): void
}
Abstract Application
{
	#login(email: string, password: string): short
	{abstract}#editUser(updatedUser: User): boolean
	{abstract}+mainThread(): short
}
Class ClientApplication
{
	-registerUser(name: string, address: string, email: string, bankAccountNumber: string): boolean
	-setSubscription(newSub: Subscription): boolean
	-makeReservation(carId: unsigned long long,\n userId: unsigned long long,\n startTime: unsigned long long,\n endTime: unsigned long long): boolean
	
}
Class AdminApplication
{
	-createAdmin(email:string, password: string): boolean
	-editCar(updatedCar: CarDetails): boolean
}
Class UserSession
{
	-id: unsigned long long
	-userId: unsinged long long
}
Class Car{
	-doorsOpen: boolean
	-immobilizer: boolean
	-keyPresent: boolean
}
Class Bank

Interface IDataBaseConnector
{
	+getUser(id: unsigned long long):User
	+getUser():User[0..*]
	+addUser(newUser: User):void
	+editUser(updatedUser: User):void
	+deleteUser(user: User):void
	+getReservation(id: unsigned long long):Reservation
	+getReservation():Reservation[0..*]
	+addReservation():void
	+editReservation():void
	+deleteReservation():void
	+getCar(id: unsigned long long):CarDetails
	+getCar():Car[0..*]
	+addCar():void
	+editCar():void
	+deleteCar():void
	+getOpenPayment(id: unsigned long long):OpenPayment
	+getOpenPayment():OpenPayment[0..*]
	+addOpenPayment():void
	+editOpenPayment():void
	+deleteOpenPayment():void
}

Class PoleSession
{
	-id: unsigned long long
	+getId(): unsigned long long
	+blinkSignalOn: void(void)
	+blinkSignalOff: void(void)
}

Class CarSession
{
	-id: unsigned long long
	+getId(): unsigned long long
	+blinkSignalOn: void(void)
	+blinkSignalOff: void(void)
}

Abstract Session
{
	-id: unsigned long long
	+getId(): unsigned long long
}

Class SessionHandler
{
}

Package DataTypes
{
	Class CarDetails
	{
		-id: unsigned long long
		-brand: string
		-licensePlate: string
		-noDoors: unsigned short
		-noSeats: unsigned short
		-extras: string
		+getId():unsigned long long
		+getBrand():string
		+getLicensePlate():string
		+getNoDoors():unsigned short
		+setNoDoors(noDoors:unsigned short):void
		+getNoSeats():unsigned short
		+setNoSeats(noSeats:unsigned short):void
		+getExtras():string
		+setExtras(extras:string):void
	}

	Class Reservation
	{
		-id: unsigned long long
		-startTime: unsigned long long
		-endTime: unsigned long long
		-checkedIn: boolean
		-startMileage: unsigned long long
		-endMileage: unsigned long long
		-completed: boolean
		+getid():unsigned long long
		+getCardId():unsigned long long
		+getStartTime(): unsigned long long
		+getEndTime():unsigned long long
		+isCheckedIn():boolean
		+setChecked(checkedIn:boolean):void
		+getStartMileage():unsigned long long
		+setStartMileage(mileage:unsigned long long):void
		+getEndMileage():unsigned long long
		+setEndMileage(mileage:unsigned long long):void
		+isCompleted():boolean
		+setCompleted(isCompleted:boolean):void
	}



	Class User
	{
		-id: unsigned long long
		-name: string
		-address: string
		-reputation: short
		-accountActive: boolean
		-cardId: unsigned long long
		-bankAccountNumber: string
		-email: string
		+getId():unsigned long long
		+getName():string
		+setName(name:string):void
		+getAddress():string
		+setAddress(address:string):void
		+getReputation():short
		+setReputation(reputation:short):void
		+getCardId:unsigned long long
		+getBankAccountNumber():string
		+setBankAccountNumber(bank:string):void
		+getEmail():string
		+setEmail(email:string):void
	}

	Class OpenPayment
	{
		-id: unsigned long long
		-amount: float
		-status: InvoiceStatus
		+getId():unsigned long long
		+getAmount():float
		+getStatus():InvoiceStatus
		+setStatus(status:InvoiceStatus)
	}

	enum CarStatus
	{
		DOORS_CLOSED_AT_REDCARS
		DOORS_OPEN_AT_REDCARS
		PARKED
		ACTIVE
		PARKED_AT_REDCARS
	}

	enum Subscription
	{
		BETAALD
		GRATIS
	}
	
	enum InvoiceStatus
	{
		PENDING
		PROCESSING
		PAID
		REJECTED
	}
}

Class Card
{
	-id : unsigned long long
	+getId():unsigned long long 
}

Class Position <<struct>>
{
	+longitude: double
	+latitude: double
	+altitude: double
}

Package DataTypes_{
}

note bottom of DataTypes_
	The DataBase class includes 
	the "DataTypes" package
end note

IClientSession <|.. IAdminSession
IPositional <|.. GPS
ICloseCommunication <|.. RFID
ICloseCommunication <- Pole
Pole 	-> ICheckInDB
ICheckInDB <|.. PoleSession
IAdminSession <|.. UserSession
UserSession --|> Session
ICarDB <|.. CarSession
PoleSession --|> Session
CarSession --|> Session
IPayment <|.. Payment
Payment --> IBank
ICarDB <- CarModule
CarModule 	-> IPositional
ICar <-- CarModule
IClientSession <- ClientApplication
IAdminSession <- AdminApplication
ClientApplication -|> Application
Application <|-- AdminApplication
ICloseCommunication <- CarModule
ICar <|. Car
IBank <|.. Bank
IPositional .> Position
Reservation -> CarDetails
Subscription <-- Reservation
OpenPayment <--> User
CarDetails 	-> CarStatus
IDataBaseConnector <- Session
AdminApplication -[hidden]> ICarDB
ICheckInDB -[hidden]> IAdminSession
Application -[hidden]> ICar
Session <-- SessionHandler
PoleSession ---> IPayment
IDataBaseConnector ..> DataTypes_
DataTypes <.. IClientSession
DataTypes <.. Application
IPayment .> DataTypes_
IDataBaseConnector <.. IPayment
OpenPayment -> InvoiceStatus
Card <-- Pole
User --> Card
Reservation --> Card
@enduml