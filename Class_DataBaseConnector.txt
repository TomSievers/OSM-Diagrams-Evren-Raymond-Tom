@startuml

skinparam classAttributeIconSize 0

Interface IClientSession
{
	+getUser(userId: unsigned long long): User
	+updateUser(updatedUser: User): boolean
	+searchCar(searchQuery: string): CarDetails[0..*]
	+hasOpenPayment(userId: unsigned long long):boolean
}
Interface IPoleSession
{
	+hasActiveReservation(cardId: unsigned long long): boolean
	+checkIn(cardId: unsigned long long) : void
	+checkOut(cardId: unsigned long long) : void
	+hasCarInUse(cardId:unsigned long long) : boolean
	+carIsOnOriginalPosition(cardId:unsigned long long) : boolean
	+poleBlinkSetup(blinkSignalOn: void(void), blinkSignalOff: void(void)): void
	+hasOpenPayment(cardId: unsigned long long):boolean
}

Interface ICarSession
{
	+getReservedCardId(id: unsigned long long): unsigned long long
	+updatePosition(currentPosition: Position): void
	+updateCarStatus(status: CarStatus):void
	+carBlinkSetup(blinkSignalOn: void(void), blinkSignalOff: void(void)): void
}

Interface IAdminSession
{
	+updateCar(updatedCar: CarDetails): boolean
}
Class UserSession
{
	-userId: unsigned long long
	+getUserId(): unsigned long long
}

Interface IDataBaseConnector
{
	+getUser(id: unsigned long long):User
	+getUserFromCard(cardId:unsigned long long):User
	+getUser():User[0..*]
	+addUser(newUser: User):void
	+editUser(updatedUser: User):void
	+deleteUser(user: User):void
	+getReservation(id: unsigned long long):Reservation
	+getReservation():Reservation[0..*]
	+getFirstReservationForCard(cardId: unsigned long long): Reservation
	+getActiveReservationForCard(cardId: unsigned long long) : Reservation
	+getActiveReservationForCar(carId:unsigned long long): Reservation
	+addReservationForUser(newReservation:Reservation , userId:unsigned long long):void
	+editReservation(updatedReservation:Reservation):void
	+deleteReservation(id:unsigned long long):void
	+getCar(id: unsigned long long):CarDetails
	+getCar():Car[0..*]
	+addCar():void
	+editCar():void
	+deleteCar():void
	+getOpenPayment(id: unsigned long long):OpenPayment
	+getOpenPayment():OpenPayment[0..*]
	+addOpenPayment(newOpenPayment:OpenPayment):void
	+editOpenPayment(updatedOpenPayment:Payment):void
	+deleteOpenPayment(id: unsigned long long):void
	+userHasOpenPayments(userId: unsigned long long): boolean
}

Class PoleSession
{
	-poleId: unsigned long long
	+getPoleId(): unsigned long long
	+blinkSignalOn: void(void)
	+blinkSignalOff: void(void)
}

Class CarSession
{
	-carId: unsigned long long
	+getCarId(): unsigned long long
	+blinkSignalOn: void(void)
	+blinkSignalOff: void(void)
}

Abstract Session
{
	-sessionid: unsigned long long
	+getSessionId(): unsigned long long
}

Class SessionHandler
{
}

Package DataTypes{
}



IClientSession <|.. IAdminSession 
IPoleSession <|.. PoleSession
IAdminSession <|.. UserSession
UserSession --|> Session
ICarSession <|.. CarSession
PoleSession --|> Session
CarSession --|> Session
IDataBaseConnector "DBCon" <-- Session
SessionHandler -> "0..*" Session: sessions
DataTypes <.. IDataBaseConnector
DataTypes <.. IClientSession
DataTypes <.. ICarSession
IClientSession -[hidden]> ICarSession
IAdminSession -[hidden]> CarSession
ICarSession -[hidden]> IDataBaseConnector

@enduml
